/* -    -   -   -   -
the 4 main classes of a page
-   -   -   -   - */
body{
    background-image: url(../Images/MintBlock32px.svg);
    background-repeat: repeat;
    background-position-x: center;
    /* giving the body a margin of 0 makes every future element hug the site borders */
    margin: 0;
    text-shadow: 0 0 10px var(--mintlightest-color) ;
    /* setting height to vh so it fills the given screen space. */
    /* remember spacing is the sum of all parts one cannot use more than 100% of the space.
    so developing or finding a style for what elements should have box in a box. boxes should auto align themselves inside the container they stay in.
    but boxes should not auto elements around themselves. focusing the use of auto in one direction either outward or inward else empty or unwanted results may happen i think */
    text-align: center;
    /* should fill body with as much details i want as not to repeat myself */
    min-width: 650px;
    display: flex;
    flex-flow: column;
    min-height: 100vh;
}
header{
    position: sticky;
    top: 0;
}
main{
    flex: 1;
    margin: auto;
}
footer{
    border-top: dotted 5px var(--mintdarkest-color);
    background-color: var(--mintdark-color);
    color: var(--mintlightest-color);
}
/* -    -   -   -   -
Nav bar styling
-   -   -   -   - */
#nav-bar{
    padding-top: 20px;
    display: inline-flex;
    flex-direction: row;
    justify-content: space-evenly;
    margin: 20px;
    z-index: 1;
}
.dropdown-menu{position: relative;}
.dropdown-label{color: var(--mintdark-color);}
#dropdown-content{
    transform: translateX(-25px);
    margin-top: 10px;
    padding: 12px;
    border-top: none;
    visibility: hidden;
    position: absolute;
    z-index: 1;
    border: var(--mintdarkest-color) 15px groove;
    background-color: var(--mint-color);
    border-top: none;
    opacity: 0;
    transition: 750ms all;
    display: flex;
    flex-direction: column;
}
.dropdown-menu:hover #dropdown-content{
    opacity: 1;
    visibility: visible;
}
.nav-el{
    background-color: var(--mint-color);
    padding: 10px;
    border: var(--mintdarkest-color) 15px groove;
    border-bottom: var(--mintdarkest-color) 15px ridge;
}
.nav-el:first-child{
    border-radius: 5rem 0 0 5rem;
    border-bottom: var(--mintdarkest-color) 15px ridge;
}
.nav-el:last-child{
    border-radius: 0 5rem 5rem 0;
    border-right: var(--mintdarkest-color) 15px ridge;
    border-left: var(--mintdarkest-color) 15px ridge;
}
/* remember to check for only child last or else it will accept last child as the correct choice. as always order of operation matters in all programming */
.nav-el:only-child{
    border-radius: 5rem;
    border-width: 20px;
}
.dropdown-menu{border-bottom: none;}
/* -    -   -   -   -
horizontal scroll
-   -   -   -   - */
#h-bar{
    overflow-x: hidden;
    overflow-x: scroll;
    margin: auto;
    border: 5px solid red;
    width: 100px;
    height: fit-content;
    font-size: 20;
    display: flex;
    flex-direction: row;
    transition: all 5s;
}
#h-bar:hover{
    border: 50px solid red;
}
#h-bar p::first-letter{
    font-size: 25;
    color: red;
}
#h-bar p{
    margin: 5px;
}
#h-bar p{
    background-color: black;
    color: white;
    border: groove 5px white;
}
#h-bar p:nth-child(2n){
    color: green;
}
#h-bar p:nth-child(3n+1){
    color: pink;
}
#h-bar p:hover{
    background-color: white;
    color: black;
    border: dotted 5px black;
}
/* -    -   -   -   -
my css variables
-   -   -   -   - */
:root{
    --mintdarkest-color: rgb(97,165,117);
    --mintdark-color: rgb(112,183,133);
    --mint-color: rgb(135,209,159);
    --mintlight-color: rgb(151,230,179);
    --mintlightest-color: rgb(182,243,204);
    --mintborder-border: groove 5px var(--mintdarkest-color);
}

/* -    -   -   -   -
my sitewide classes
-   -   -   -   - */
.sticky-test{
    position: sticky;
    top: 0;
    border: groove 5px var(--mintlightest-color);
    max-width: fit-content;
    margin: 0 auto;
}
.sticky-test p{
    margin: 0;
}
section{
    margin: 0 auto;
    width: 50%;
    padding: 10px;
    background-color: var(--mintdark-color);
    border: var(--mintborder-border);
}
.main-text{
    /* testing ground for text align */
    text-align: left;
}
.goalslist{
    /* i have the desired result of a ul aligned like a column, this could be done with flex */
    max-width: fit-content;
    margin: 0 auto;
    text-align: left;
}
/* i could and probably should just go into img and video to control the scale of these. but doing it like this reminded me of the importance on order of operation*/
.images{
    max-width: 100%;
    height: auto;
}
.polkacubevid {
    width: 100%;
    height: auto;
}
/* -    -   -   -   -
flex box styling
-   -   -   -   - */
.flexcontainer{
    /* why have i nested flex twice. well what if i want a box that tells what is inside the flex underneath */
    width: 0 auto;
    border: dotted 5px var(--mintdarkest-color);
}
.flexcols{
    /* this class controls how the flex "boxes" should behave with spacing
    ive given it a border purely for viusal purposes of reminding myself that it is something there
    i guess seperating the container and controler is a way to go easier to move arund the boxes if i want them elsewhere*/
    border: dotted 5px var(--mintdarkest-color);
    display: flex;
    justify-content: center;
}
.hovertest{
    background-color: black;
    color: white;
    border: groove 5px white;
}
.hovertest:hover{
    background-color: white;
    color: black;
    border: dotted 5px black;
}
/* -    -   -   -   -
fancy links
-   -   -   -   - */
.link-el, .link-el:link .link-el:visited{
    background-color: aquamarine;
    color: black;
    padding: 10px;
    text-align: center;
    text-decoration: none;
    border-radius: 5rem 0;
}
.link-el:hover, .link-el:active{
    background-color: var(--mintdarkest-color);
    border-radius: 0 5rem;
}
/* -    -   -   -   -   
Parallax dangerzone
-   -   -   -   - */
.parallax-item{
    position: relative;
    background-attachment: fixed;
    background-position-x: center;
}
.chocolatebox, .greenstairs, .purplebox{
    min-height: 128px;
    width: auto;
    z-index: -1;
}
.chocolatebox{
    background-image: url(../Images/ChocolateBox32.svg);
}
.greenstairs{
    background-image: url(../Images/GreenStairs32.svg);
}
.purplebox{
    background-image: url(../Images/PurpleBox32.svg);
}
/* -    -   -   -   -
calculator page
-   -   -   -   - */
#calculator-btns{
    margin: 10px;
}
/* -    -   -   -   -
Canvas style and "placement"
-   -   -   -   - */
#canvas-section{
    /* i for some reason wrote stuff inline cause reasons */
    width: fit-content;
}
/* -    -   -   -   -
style for html form
-   -   -   -   - */
#agegate, #namegate{
    visibility: hidden;
    opacity: 0;
    transition: all 2000ms;
}
#agecheck{
    text-align: center;
    width: 100px;
}
#username{
    width: auto;
    text-align: center;
}
label, select, input{
    margin: 5px 0;
}
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}
/* Firefox */
input[type=number] {
  -moz-appearance: textfield;
}