/* -    -   -   -   -
the 4 main classes of a page
-   -   -   -   - */
body{
    background-image: url(../Images/MintBlock32px.svg);
    background-repeat: repeat;
    /* giving the body a margin of 0 makes every future element hug the site borders */
    margin: 0;
    text-shadow: 0 0 10px var(--mintlightest-color) ;
    /* setting height to vh so it fills the given screen space. */
    height: 100vh;
    /* setting body in deisplay flex so now i know the header main footer layout is controlled by this, dont know if good practice but works for now. */
    display: flex;
    flex-direction: column;
    /* remember spacing is the sum of all parts one cannot use more than 100% of the space.
    so developing or finding a style for what elements should have box in a box. boxes should auto align themselves inside the container they stay in.
    but boxes should not auto elements around themselves. focusing the use of auto in one direction either outward or inward else empty or unwanted results may happen i think */
    text-align: center;
    /* should fill body with as much details i want as not to repeat myself */
}
header{
    background-color: var(--mintdark-color);
}
main{
    border: var(--mintborder-border);
    margin: 0 auto;
    width: 50%;
    min-height: auto;
    padding: 10px;
    box-shadow: 0 0 15px 15px var(--mintdark-color);
}
footer{
    border-top: dotted 5px var(--mintdarkest-color);
    background-color: var(--mintdark-color);
    color: var(--mintlightest-color);
/* without enough content this dude is so high up :c, oh well cant learn it all in 1 day,
fixed this problem by setting the body in display flex column and having this with margin top auto*/
    margin-top: auto;
}
/* -    -   -   -   -
my css variables
-   -   -   -   - */
:root{
    --mintdarkest-color: rgb(97,165,117);
    --mintdark-color: rgb(112,183,133);
    --mint-color: rgb(135,209,159);
    --mintlight-color: rgb(151,230,179);
    --mintlightest-color: rgb(182,243,204);
    --mintborder-border: groove 5px var(--mintdarkest-color);
}
/* -    -   -   -   -
my custom classes
-   -   -   -   - */
.geninfo{
    margin: 0 auto;
    width: 0 auto;
    padding: 10px;
    background-color: var(--mintdark-color);
    border: var(--mintborder-border);
}
.textctrl{
    /* testing ground for text align */
    text-align: left;
}
.goalslist{
    /* i have the desired result of a ul aligned like a column, this could be done with flex */
    max-width: fit-content;
    margin: 0 auto;
    text-align: left;
}
/* i could and probably should just go into img and video to control the scale of these. but doing it like this reminded me of the importance on order of operation*/
.images{
    max-width: 100%;
    height: auto;
}
.polkacubevid {
    width: 100%;
    height: auto;
}
/* -    -   -   -   -
flex box styling
-   -   -   -   - */
.flexcontainer{
    /* why have i nested flex twice. well what if i want a box that tells what is inside the flex underneath */
    width: 0 auto;
    border: dotted 5px var(--mintdarkest-color);
}
.flexcols{
    /* this class controls how the flex "boxes" should behave with spacing
    ive given it a border purely for viusal purposes of reminding myself that it is something there
    i guess seperating the container and controler is a way to go easier to move arund the boxes if i want them elsewhere*/
    border: dotted 5px var(--mintdarkest-color);
    display: flex;
    justify-content: center;
}
.flexcol{
    padding: 10px;
    margin: 10px auto;
    border: var(--mintdarkest-color) 15px groove;
}
.flexcol:first-child{
    border-radius: 5rem 0 0 5rem;
}
.flexcol:last-child{
    border-radius: 0 5rem 5rem 0;
}
.flexcol:only-child{
    border-radius: 5rem;
    border-width: 20px;
}
/* remember to check for only child last or else it will accept last child as the correct choice.
as always order of operation matters in all programming */
.hovertest{
    background-color: black;
    color: white;
    border: groove 5px white;
}
.hovertest:hover{
    background-color: white;
    color: black;
    border: dotted 5px black;
}
/* -    -   -   -   -
fancy links
-   -   -   -   - */
a, a:link a:visited{
    background-color: aquamarine;
    color: black;
    padding: 10px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    border-radius: 5rem 0;
}
a:hover, a:active{
    background-color: var(--mintdarkest-color);
    border-radius: 0 5rem;
}